import os

from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy.orm import sessionmaker

from bot.database.transactions import import_transactions
from bot.misc.states import GetCSV
from bot.utils.csv_reader import CsvReader

import_router = Router()


@import_router.message(F.text == 'üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
async def request_csv_file(message: Message, state: FSMContext):
    await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª')
    await state.set_state(GetCSV.waiting_file)


@import_router.message(GetCSV.waiting_file)
async def get_file(message: Message, bot: Bot, state: FSMContext, session_maker: sessionmaker):
    # Download file
    file = await bot.get_file(message.document.file_id)
    await bot.download_file(file.file_path, f'bot/utils/temp_{message.from_user.id}.csv')
    await message.answer('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω')

    try:
        # Read file
        reader = CsvReader(f'bot/utils/temp_{message.from_user.id}.csv')
        df = reader.read_csv_file()
        await message.answer('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω')

        headers = reader.get_headers(df)
        await message.answer('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã')

        check = reader.check_keys(headers)
        if check is not None:
            return await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞. –ö–æ–ª–æ–Ω–∫–∞ {check} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        await message.answer('–í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.')

        filtered = reader.filtered_df_by_datetime(df)
        data = reader.df_to_dict(filtered)
        await message.answer('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã.')

        # Import data in database
        await import_transactions(message.from_user.id, data, session_maker)
        await message.answer('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.')

    except Exception as error:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {error}\n –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')
    finally:
        # Clear state and delete temp file
        await state.clear()
        os.remove(f'bot/utils/temp_{message.from_user.id}.csv')
